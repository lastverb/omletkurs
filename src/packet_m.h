//
// Generated file, do not edit! Created by opp_msgc 4.2 from packet.msg.
//

#ifndef _PACKET_M_H_
#define _PACKET_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>packet.msg</tt> by opp_msgc.
 * <pre>
 * packet Packet {
 *     int dst;
 *     int src;
 *     int sessionId;
 *     int packetId;
 *     int priorityClass;
 *     unsigned char payload[];
 * }
 * </pre>
 */
class Packet : public ::cPacket
{
  protected:
    int dst_var;
    int src_var;
    int sessionId_var;
    int packetId_var;
    int priorityClass_var;
    unsigned char *payload_var; // array ptr
    unsigned int payload_arraysize;

  private:
    void copy(const Packet& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Packet&);

  public:
    Packet(const char *name=NULL, int kind=0);
    Packet(const Packet& other);
    virtual ~Packet();
    Packet& operator=(const Packet& other);
    virtual Packet *dup() const {return new Packet(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getDst() const;
    virtual void setDst(int dst);
    virtual int getSrc() const;
    virtual void setSrc(int src);
    virtual int getSessionId() const;
    virtual void setSessionId(int sessionId);
    virtual int getPacketId() const;
    virtual void setPacketId(int packetId);
    virtual int getPriorityClass() const;
    virtual void setPriorityClass(int priorityClass);
    virtual void setPayloadArraySize(unsigned int size);
    virtual unsigned int getPayloadArraySize() const;
    virtual unsigned char getPayload(unsigned int k) const;
    virtual void setPayload(unsigned int k, unsigned char payload);
};

inline void doPacking(cCommBuffer *b, Packet& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Packet& obj) {obj.parsimUnpack(b);}


#endif // _PACKET_M_H_
